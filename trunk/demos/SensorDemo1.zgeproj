<?xml version="1.0" encoding="iso-8859-1" ?>
<ZApplication Name="App" Comment="Created by Rado1 (c) 2013" Caption="Sensor Demo 1" ScreenMode="0" NoSound="1" AndroidPackageName="com.rado1.SensorDemo1">
  <OnLoaded>
    <ZExternalLibrary Comment="ZGESensor library" ModuleName="./libZGESensor.so" CallingConvention="1">
      <Source>
<![CDATA[/*
  ZGESensor Library used to handle various sensors on Android.

  Download Android shared library from
  http://code.google.com/p/zgesensor/downloads

  Copyright (c) 2013 Radovan Cervenka
*/

// sensor types; also used as sensor identifiers
const int SENSOR_TYPE_ACCELEROMETER = 1;
const int SENSOR_TYPE_MAGNETIC_FIELD = 2;
const int SENSOR_TYPE_ORIENTATION = 3; // deprecated
const int SENSOR_TYPE_GYROSCOPE = 4;
const int SENSOR_TYPE_LIGHT = 5;
const int SENSOR_TYPE_PROXIMITY = 8;
const int SENSOR_TYPE_ROTATION_VECTOR = 11;
const int SENSOR_TYPE_RELATIVE_HUMIDITY = 12;
const int SENSOR_TYPE_PRESSURE = 6;
const int SENSOR_TYPE_LINEAR_ACCELERATION = 10;
const int SENSOR_TYPE_GRAVITY = 9;
const int SENSOR_TYPE_AMBIENT_TEMPERATURE = 13;

// display rotation
const int ROTATION_0 = 0;
const int ROTATION_90 = 1;
const int ROTATION_180 = 2;
const int ROTATION_270 = 3;

// Initialize the library.
void sensorInitLib() {}

// Stop the library usage. Returns a negative error code on failure.
int sensorStopLib() {}

// Get rotation of display
int getDisplayRotation() {}

// Start to use sensor of the specified type.
// Returns a negative error code on failure.
int sensorUse(int type) {}

// Set the delivery rate of events in microseconds for a sensor
// of the given type.
// Returns a negative error code on failure.
int sensorSetEventRate(int type, float eventRate) {}

// Disable a sensor of the specified type.
// Returns a negative error code on failure.
int sensorDisable(int type) {}

// Enable a sensor of the specified type.
// Returns a negative error code on failure.
int sensorEnable(int type) {}

/*
 * Get actual data for the selected scalar sensor type.
 * This is used for sensors such as ambient temperature,
 * proximity, light, pressure or humidity.
 */
void sensorGetData1(int type, ref float value) {}

/*
 * Get actual data for the selected 3D sensor type.
 * This is used for sensors such as accelerometer, magnetic field,
 * gyroscope, or gravity.
 */
void sensorGetData3(int type, ref float x, ref float y, ref float z) {}

/*
 * Get actual data for the selected 3D sensor type.
 * Rotation vector sensor uses <x, y, z, w> as components of
 * a unit quaternion representing rotation of the device.
 */
void sensorGetData4(int type, ref float x, ref float y, ref float z, ref float w) {}

// Return name of a sensor of the specified type.
string sensorGetName(int type) {}

// Return vendor's name of a sensor of the specified type.
string sensorGetVendor(int type) {}

// Return resolution of a sensor of the specified type.
float sensorGetResolution(int type) {}

/*
 * Return the minimum delay allowed between events in microseconds for
 * a sensor of the specified type.
 */
float sensorGetMinDelay(int type) {}]]>
      </Source>
    </ZExternalLibrary>
    <ZExpression Comment="Init">
      <Expression>
<![CDATA[sensorInitLib();

// initialize accelerometer
if(sensorUse(SENSOR_TYPE_ACCELEROMETER))
  quit();
else
  InfoText1.Text = sensorGetName(SENSOR_TYPE_ACCELEROMETER);

// initialize light
if(sensorUse(SENSOR_TYPE_LIGHT)){
  InfoText2.Text = "No light sensor";
  IsLight = 0;
} else {
  InfoText2.Text = sensorGetName(SENSOR_TYPE_LIGHT);
  IsLight = 1;
}

// get display rotation
DisplayRotation = getDisplayRotation();
string rot;
switch(DisplayRotation){
  case ROTATION_0: rot = "0"; break;
  case ROTATION_90: rot = "90"; break;
  case ROTATION_180: rot = "180"; break;
  case ROTATION_270: rot = "270"; break;

}
InfoText3.Text = "Rotation: " + rot;]]>
      </Expression>
    </ZExpression>
    <SpawnModel Model="SpriteModel"/>
  </OnLoaded>
  <OnClose>
    <ZExpression Comment="Stop sensors" Expression="sensorStopLib();"/>
  </OnClose>
  <OnUpdate>
    <KeyPress Comment="Pause" CharCode="255">
      <OnPressed>
        <ZExpression Comment="Disable sensors">
          <Expression>
<![CDATA[sensorDisable(SENSOR_TYPE_ACCELEROMETER);
if(IsLight) sensorDisable(SENSOR_TYPE_LIGHT);]]>
          </Expression>
        </ZExpression>
      </OnPressed>
    </KeyPress>
    <KeyPress Comment="Resume" CharCode="254">
      <OnPressed>
        <ZExpression Comment="Enable sensors">
          <Expression>
<![CDATA[sensorEnable(SENSOR_TYPE_ACCELEROMETER);
if(IsLight) sensorEnable(SENSOR_TYPE_LIGHT);]]>
          </Expression>
        </ZExpression>
      </OnPressed>
    </KeyPress>
  </OnUpdate>
  <OnRender>
    <UseMaterial Material="DinaMaterial"/>
    <RenderText Name="InfoText1" Text="*************" Y="0.7" Scale="0.6"/>
    <RenderText Name="XText" Text="X: ---" X="-0.46" Y="0.55" Scale="0.6" Align="1"/>
    <RenderText Name="YText" Text="Y: ---" X="-0.46" Y="0.4" Scale="0.6" Align="1"/>
    <RenderText Name="InfoText2" Text="*************" Scale="0.6"/>
    <RenderText Name="LText" Text="L: ---" X="-0.46" Y="-0.15" Scale="0.6" Align="1"/>
    <RenderText Name="InfoText3" Text="*************" Y="-0.54" Scale="0.6"/>
  </OnRender>
  <Content>
    <Variable Name="DisplayRotation" Type="1"/>
    <Variable Name="IsLight" Type="1"/>
    <Group Name="DinaFontGroup" Comment="Dina">
      <Children>
        <Font Name="DinaFont" Bitmap="DinaBitmap" FirstChar="32" CharPixelWidth="8" CharPixelHeight="16"/>
        <Bitmap Name="DinaBitmap" Comment="Font from http://www.donationcoder.com/Software/Jibz/Dina/index.html" Width="3" Height="3" Filter="1">
          <Producers>
            <BitmapFromFile Transparency="1">
              <BitmapFile>

              </BitmapFile>
            </BitmapFromFile>
          </Producers>
        </Bitmap>
        <Material Name="DinaMaterial" Shading="1" Light="0" Blend="1" ZBuffer="0" Font="DinaFont"/>
      </Children>
    </Group> <!-- DinaFontGroup -->

    <Model Name="SpriteModel">
      <OnRender>
        <RenderSetColor Color="0.2745 0.6392 1 1"/>
        <RenderSprite/>
      </OnRender>
      <OnUpdate>
        <ZExpression Comment="Use sensor data">
          <Expression>
<![CDATA[float x, y, a;

// update position by accelerometer

sensorGetData3(SENSOR_TYPE_ACCELEROMETER, x, y, a);

// recompute by display rotation
switch(DisplayRotation){
  case ROTATION_0:
    x = 0 - x;
    y = 0 - y;
    break;
  case ROTATION_90:
    a = x;
    x = y;
    y = 0 - a;
    break;
  case ROTATION_270:
    a = x;
    x = 0 - y;
    y = x;
}

CurrentModel.Velocity.X = x;
CurrentModel.Velocity.Y = y;

if(abs(CurrentModel.Position.X) > 7){
  CurrentModel.Position.X = 7 * (CurrentModel.Position.X > 0 ? 1 : -1);
  CurrentModel.Velocity.X = 0;
}

if(abs(CurrentModel.Position.Y) > 4){
  CurrentModel.Position.Y = 4 * (CurrentModel.Position.Y > 0 ? 1 : -1);
  CurrentModel.Velocity.Y = 0;
}

XText.Text = "X: " + intToStr(x*100);
YText.Text = "Y: " + intToStr(y*100);

// update rotation by light

if(IsLight){
  sensorGetData1(SENSOR_TYPE_LIGHT, x);
  CurrentModel.RotationVelocity.Z = x / 500;
  LText.Text = "L: " + intToStr(x);
}]]>
          </Expression>
        </ZExpression>
      </OnUpdate>
    </Model>
  </Content>
</ZApplication>
