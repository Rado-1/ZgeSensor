ZZDC<?xml version="1.0" encoding="iso-8859-1" ?>
<ZExternalLibrary Comment="ZgeSensor library" ModuleName="./libZgeSensor.so">
  <Source>
<![CDATA[/*
  ZgeSensor Library used to handle various sensors on Android.

  Download Android shared library from
  http://code.google.com/p/zgesensor/downloads

  Copyright (c) 2013-2015 Radovan Cervenka
*/

// sensor types; also used as sensor identifiers
const int
  SENSOR_TYPE_ACCELEROMETER = 1,
  SENSOR_TYPE_MAGNETIC_FIELD = 2,
  SENSOR_TYPE_ORIENTATION = 3, // deprecated
  SENSOR_TYPE_GYROSCOPE = 4,
  SENSOR_TYPE_LIGHT = 5,
  SENSOR_TYPE_PROXIMITY = 8,
  SENSOR_TYPE_ROTATION_VECTOR = 11,
  SENSOR_TYPE_RELATIVE_HUMIDITY = 12,
  SENSOR_TYPE_PRESSURE = 6,
  SENSOR_TYPE_LINEAR_ACCELERATION = 10,
  SENSOR_TYPE_GRAVITY = 9,
  SENSOR_TYPE_AMBIENT_TEMPERATURE = 13;

// display rotation
const int
  ROTATION_0 = 0,
  ROTATION_90 = 1,
  ROTATION_180 = 2,
  ROTATION_270 = 3;

// Initialize the library. Must be called from OnUpdate section.
void sensorInitLib() {}

// Stop the library usage. Returns a negative error code on failure.
int sensorStopLib() {}

// Get rotation of display
int getDisplayRotation() {}

// Start to use sensor of the specified type.
// Returns a negative error code on failure.
int sensorUse(int type) {}

// Set the delivery rate of events in microseconds for a sensor
// of the given type.
// Returns a negative error code on failure.
int sensorSetEventRate(int type, float eventRate) {}

// Disable a sensor of the specified type.
// Returns a negative error code on failure.
int sensorDisable(int type) {}

// Enable a sensor of the specified type.
// Returns a negative error code on failure.
int sensorEnable(int type) {}

/*
 * Get actual data for the selected scalar sensor type.
 * This is used for sensors such as ambient temperature,
 * proximity, light, pressure or humidity.
 */
void sensorGetData1(int type, ref float value) {}

/*
 * Get actual data for the selected 3D sensor type.
 * This is used for sensors such as accelerometer, magnetic field,
 * gyroscope, or gravity.
 */
void sensorGetData3(int type, ref float x, ref float y, ref float z) {}

/*
 * Get actual data for the selected 3D sensor type.
 * Rotation vector sensor uses <x, y, z, w> as components of
 * a unit quaternion representing rotation of the device.
 */
void sensorGetData4(int type, ref float x, ref float y, ref float z, ref float w) {}

// Return name of a sensor of the specified type.
string sensorGetName(int type) {}

// Return vendor's name of a sensor of the specified type.
string sensorGetVendor(int type) {}

// Return resolution of a sensor of the specified type.
float sensorGetResolution(int type) {}

/*
 * Return the minimum delay allowed between events in microseconds for
 * a sensor of the specified type.
 */
float sensorGetMinDelay(int type) {}]]>
  </Source>
</ZExternalLibrary>